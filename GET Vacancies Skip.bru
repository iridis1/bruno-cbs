meta {
  name: GET Vacancies Skip
  type: http
  seq: 4
}

get {
  url: {{baseUrl}}/odata/v1/Vacancies?$skip={{skipped}}
  body: none
  auth: none
}

params:query {
  $skip: {{skipped}}
}

vars:pre-request {
  skipped: 2
}

script:pre-request {
  const axios = require("axios");
  
  const allVacanciesResponse = await axios.get(bru.getEnvVar("baseUrl") + "/odata/v1/Vacancies");
  const allVacancies = allVacanciesResponse.data.value;
  
  bru.setVar("allVacancies", allVacancies);
  
  
}

tests {
  const axios = require("axios");
  const vacancyValidation = require("./scripts/vacancy-validation.js");
  
  test("GET /Vacancies$skip=x should return all but skipped vacancies", function () {
    vacancyValidation.expectValidOdataResponse(res);    
    
    const skipped = Number(bru.getRequestVar("skipped"));
    const vacancies = res.body.value;  
    vacancyValidation.expectValidVacancies(vacancies);  
    
    const allVacancies = bru.getVar("allVacancies");
    expect(vacancies.length).to.equal(allVacancies.length - skipped);
    expect(vacancies[0].UniqueId).to.equal(allVacancies[skipped].UniqueId);
  });
  
}
